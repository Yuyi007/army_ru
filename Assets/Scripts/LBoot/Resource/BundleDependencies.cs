//
// BundleDependencies.cs
//
// Author:
//       duwenjie
//

//
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

// #define PROFILE_FILE

using System;
using UnityEngine;
using SLua;
using System.Collections;
using System.Collections.Generic;

namespace LBoot
{
    /// <summary>
    /// BundleDependencies handles all about bundle dependencies
    /// </summary>
    [CustomLuaClassAttribute]
    public class BundleDependencies
    {
        private string manifestFile = null;
        private AssetBundle _manifestBundle = null;
        private AssetBundleManifest _manifest = null;

        private Dictionary<string, string> _variants = new Dictionary<string, string>();
        private Dictionary<string, Dictionary<string, string>> _variantBundles = new Dictionary<string, Dictionary<string, string>>();

        public BundleDependencies(string manifestFile)
        {
            this.manifestFile = manifestFile;
        }

        protected AssetBundleManifest manifest
        {
            get
            {
                if (_manifest == null)
                {
                    LogUtil.Trace("BundleDependencies: creating manifest from " + manifestFile);
                    this._manifestBundle = BundleEncoder.CreateBundleFromFile(manifestFile);
                    _manifest = this._manifestBundle.LoadAsset<AssetBundleManifest>("AssetBundleManifest");
                    BuildVariantBundles();
                }
                return _manifest;
            }
        }

        public AssetBundle manifestBundle
        {
            get
            {
                return _manifestBundle;
            }
        }

        public void ReloadManifest()
        {
#if PROFILE_FILE
            Profiler.BeginSample("BundleDependencies.ReloadManifest");
#endif
            _manifest = null;
            _variantBundles.Clear();
            if (this._manifestBundle != null)
            {
                this._manifestBundle.Unload(true);
                this._manifestBundle = null;
            }
#if PROFILE_FILE
            Profiler.EndSample();
#endif
        }

        [SLua.DoNotToLua]
        public void SetVariants(string[] variants)
        {
            if (variants.Length % 2 == 0)
            {
                for (var i = 0; i < variants.Length - 1; i += 2)
                {
                    _variants[variants[i]] = variants[i + 1];
                }
            }
        }

        private void BuildVariantBundles()
        {
            if (_variantBundles.Count != 0)
                return;

            var bundles = _manifest.GetAllAssetBundlesWithVariant();
            foreach (var path in bundles)
            {
                var arr = path.Split('.');
                var pathPrefix = arr[0];
                var variant = arr[2];
                Dictionary<string, string> dict = null;
                if (!_variantBundles.TryGetValue(pathPrefix, out dict))
                {
                    dict = new Dictionary<string, string>();
                    _variantBundles[pathPrefix] = dict;
                }

                dict[variant] = path;
            }
        }

        public IEnumerator LoadAllDependenciesAsync(string fname, int ttl)
        {
            if (manifest == null)
            {
                LogUtil.Error("manifest == null");
                yield break;
            }

            string dpname = fname.Replace("\\", "/");

            // Get dependecies from the AssetBundleManifest object..
            string[] dependencies = manifest.GetAllDependencies(dpname);

            var length = dependencies.Length;
            if (length == 0)
            {
                yield break;
            }
          
            // Record and load all dependencies.
            var count = (float)length;
            for (int i = 0; i < length; i++)
            {
                var depend = RemapVariantName(dependencies[i]);
                LogUtil.Trace(fname + ":dependancy:" + depend);
                var iter = BundleManager.LoadAsync(fname, depend, ttl);
                while (iter.MoveNext())
                    yield return null;
            }
        }

        public void LoadAllDependencies(string fname, int ttl)
        {
            if (manifest == null)
            {
                LogUtil.Error("manifest==null");
                return;
            }

#if PROFILE_FILE
            Profiler.BeginSample("BundleDependencies.LoadAllDependencies");
#endif
            string dpname = fname.Replace("\\", "/");
//            int idx = dpname.LastIndexOf("/") + 1;
//            dpname = dpname.Substring(idx, dpname.Length - idx);

            // Get dependecies from the AssetBundleManifest object..
            string[] dependencies = manifest.GetAllDependencies(dpname);

            var length = dependencies.Length;
            if (length == 0)
            {
                return;
            }

            // Record and load all dependencies.
            for (int i = 0; i < length; i++)
            {
                var depend = RemapVariantName(dependencies[i]);
                LogUtil.Trace(fname + ":dependancy:" + depend);
                var bundle = BundleManager.Load(depend, ttl);
                if (bundle != null)
                    bundle.AddParentBundle(fname);
            }

#if PROFILE_FILE
            Profiler.EndSample();
#endif
        }

        public string[] GetAllDependencies(string fname)
        {
            string dpname = fname.Replace("\\", "/");
            // Get dependecies from the AssetBundleManifest object..
            string[] dependencies = manifest.GetAllDependencies(dpname);

            var length = dependencies.Length;

            for (int i = 0; i < length; i++)
            {
                dependencies[i] = RemapVariantName(dependencies[i]);
            }

            return dependencies;
        }

        // Remaps the asset bundle name to the best fitting asset bundle variant.
        public string RemapVariantName(string assetBundleName)
        {
            Dictionary<string, string> variantDict = null;
            var pathPrefix = assetBundleName.Split('.')[0];
            if (_variantBundles.TryGetValue(pathPrefix, out variantDict))
            {
                foreach (var pair in _variants)
                {
                    var variant = pair.Value;
                    string realAssetBundle = null;
                    if (variantDict.TryGetValue(variant, out realAssetBundle))
                    {
                        return realAssetBundle;
                    }
                }
            }

            return assetBundleName;

        }

    }
}

