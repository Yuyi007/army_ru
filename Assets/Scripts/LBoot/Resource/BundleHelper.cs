
#define LOAD_FROM_EDITOR
// #define PROFILE_FILE
//
// BundleHelper.cs
//
// Author:
//       duwenjie
//

//
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using SLua;
using System.Linq;

#if UNITY_EDITOR
using UnityEditor;
#endif

namespace LBoot
{
    public class LoadAsyncWrapper
    {
        public bool done = false;
        public AssetBundleRef bundleRef = null;

        public void Clear()
        {
            done = false;
            bundleRef = null;
        }
    }


    [CustomLuaClassAttribute]
    public enum AsyncLoadingType
    {
        None,
        AllAssetsInBundle,
        AssetBundle,
        Scene,
        UnloadingUnused,
    }

    /// <summary>
    /// Bundle Helper provides wrapper methods for Bundle Manager
    /// Wrapped methods handles bundle path fix etc.
    /// </summary>
    [CustomLuaClassAttribute]
    public class BundleHelper
    {
        public static string uriPrefix;

        /// <summary>
        /// Unload all unused assets in memeory
        /// </summary>
        /// <param name="onComplete">On complete.</param>
        public static void UnloadAllUnsuedAssetsAsync(Action onComplete)
        {
            StartCoroutine(_UnloadAllUnsuedAssets(onComplete));
        }

        private static IEnumerator _UnloadAllUnsuedAssets(Action onComplete)
        {
#if PROFILE_FILE
            // Profiler.BeginSample("BundleHelper.UnloadAllUnsuedAssetsAsync");
#endif
            var req = Resources.UnloadUnusedAssets();
            while (!req.isDone)
                yield return null;

            onComplete();


#if PROFILE_FILE
            // Profiler.EndSample();
#endif
        }

        /// <summary>
        /// Load the level in the asset bundle (blocking & slow)
        /// </summary>
        /// <param name="uri">path to the asset bundle</param>
        public static void LoadLevel(string uri, int ttl)
        {
#if PROFILE_FILE
//            Profiler.BeginSample("BundleHelper.LoadLevel");
#endif


            UnityEngine.SceneManagement.SceneManager.LoadScene(getAssetName(uri));

#if PROFILE_FILE
//            Profiler.EndSample();
#endif
        }

        /// <summary>
        /// Loads the level in the asset bundle async.
        /// </summary>
        /// <param name="uri">path to the asset bundle</param>
        /// <param name="onComplete">On complete.</param>
        public static void LoadLevelAsync(string uri, int ttl, Action onComplete)
        {
//            LightmapSettings.lightmaps = new LightmapData[0];
            StartCoroutine(_LoadLevelAsync(uri, ttl, onComplete));
        }

        /// <summary>
        /// Loads the level in the asset bundle async.
        /// </summary>
        /// <param name="uri">path to the asset bundle</param>
        /// <param name="onComplete">On complete.</param>
        public static void LoadLevelAsync(string uri, int ttl, Action onComplete, Action<AsyncLoadingType, float> onProgress)
        {
//            LightmapSettings.lightmaps = new LightmapData[0];
            StartCoroutine(_LoadLevelAsync(uri, ttl, onComplete, onProgress));
        }

        private static IEnumerator _LoadLevelAsync(string uri, int ttl, Action onComplete, Action<AsyncLoadingType, float> onProgress = null)
        {
#if PROFILE_FILE
            // Profiler.BeginSample("BundleHelper._LoadLevelAsync");
#endif
            var fixedUri = fixBundleUri(uri);

            var asyncOp = UnityEngine.SceneManagement.SceneManager.LoadSceneAsync(getAssetName(uri));
            asyncOp.allowSceneActivation = true;
            while (!asyncOp.isDone)
            {
                if (onProgress != null)
                    onProgress(AsyncLoadingType.Scene, asyncOp.progress);
                yield return null;
            }

            onComplete();

#if PROFILE_FILE
            // Profiler.EndSample();
#endif
        }

        /// <summary>
        /// Load the level in the asset bundle additively
        /// </summary>
        /// <param name="uri">The path to the asset bundle</param>
        public static void LoadLevelAdditive(string uri, int ttl)
        {
#if PROFILE_FILE
            Profiler.BeginSample("BundleHelper.LoadLevelAdditive");
#endif
            Application.LoadLevelAdditive(getAssetName(uri));

#if PROFILE_FILE
            Profiler.EndSample();
#endif
        }

        /// <summary>
        /// Load the level additively async, with a onComplete callback
        /// </summary>
        /// <param name="uri">path to the asset bundle</param>
        /// <param name="onComplete">onComplete callback</param>
        public static void LoadLevelAdditiveAsync(string uri, int ttl, Action onComplete)
        {
            StartCoroutine(_LoadLevelAdditiveAsync(uri, ttl, onComplete, null));
        }

        /// <summary>
        /// Load the level additively async, with an onComplete and an onProgress callback
        /// </summary>
        /// <param name="uri">URI.</param>
        /// <param name="onComplete">On complete.</param>
        /// <param name="onProgress">On progress.</param>
        public static void LoadLevelAdditiveAsync(string uri, int ttl, Action onComplete, Action<AsyncLoadingType, float> onProgress)
        {
            StartCoroutine(_LoadLevelAdditiveAsync(uri, ttl, onComplete, onProgress));
        }


        private static IEnumerator _LoadLevelAdditiveAsync(string uri, int ttl, Action onComplete, Action<AsyncLoadingType, float> onProgress = null)
        {
#if PROFILE_FILE
            // Profiler.BeginSample("BundleHelper.LoadLevelAdditiveAsync");
#endif
            var fixedUri = fixBundleUri(uri);
#if !UNITY_EDITOR || !LOAD_FROM_EDITOR
            AssetBundleRef assetBundle = null;
            var iter = BundleManager.LoadWithDependenciesAsync(fixedUri, ttl, bundle => assetBundle = bundle);
            while(iter.MoveNext()) {
                if (onProgress != null) onProgress(AsyncLoadingType.AssetBundle, (float)iter.Current);
                yield return null;
            }
#endif
            var asyncOp2 = Application.LoadLevelAdditiveAsync(getAssetName(uri));
            while (!asyncOp2.isDone)
            {
                if (onProgress != null)
                    onProgress(AsyncLoadingType.Scene, asyncOp2.progress);
                yield return null;
            }

            yield return new WaitForEndOfFrame();
            onComplete();

#if PROFILE_FILE
            // Profiler.EndSample();
#endif
        }

        /// <summary>
        /// Load the asset bundle with specified uri.
        /// </summary>
        /// <param name="uri">path to the assset bundle </param>
        public static AssetBundleRef Load(string uri, int ttl)
        {
#if PROFILE_FILE
            Profiler.BeginSample("BundleHelper.Load");
#endif
            uri = fixBundleUri(uri);
            var result = BundleManager.Load(uri, ttl);

#if PROFILE_FILE
            Profiler.EndSample();
#endif
            return result;
        }

        public static string GetRealBundlePath(string uri)
        {
            var fixedUri = fixBundleUri(uri);
            return BundleManager.RemapVariantBundleName(fixedUri);
        }

        /// <summary>
        /// Loads the asset in editor.
        /// </summary>
        /// <returns>The asset in editor.</returns>
        /// <param name="uri">URI.</param>
        /// <param name="type">Type.</param>
        public static UnityEngine.Object LoadAssetInEditor(string uri, int ttl, Type type)
        {
#if PROFILE_FILE
            Profiler.BeginSample("BundleHelper.LoadAssetInEditor");
#endif
            UnityEngine.Object result = null;
#if UNITY_EDITOR
            var asset = AssetDatabase.LoadAssetAtPath(uri, type);
            result = asset;
#endif
#if PROFILE_FILE
            Profiler.EndSample();
#endif
            return result;
        }

        /// <summary>
        /// Loads the asset bundle and create a gameObject with it.
        /// </summary>
        /// <returns>The and create.</returns>
        /// <param name="name">Name.</param>
        [SLua.DoNotToLua]
        public static GameObject LoadAndCreate(string name, int ttl)
        {
#if UNITY_EDITOR && LOAD_FROM_EDITOR
            return LoadAndCreateInEditor(name, ttl);
#else

#if PROFILE_FILE
            Profiler.BeginSample("BundleHelper.LoadAndCreate");
#endif
			var uri = fixBundleUri(name);
			var bundle = BundleManager.LoadWithDependencies(uri, ttl);
			var assetName = getAssetName(name);
			var go = bundle.LoadAsset(assetName) as GameObject;
			var result = GameObject.Instantiate(go);

#if PROFILE_FILE
            Profiler.EndSample();
#endif
            return result;
#endif
        }


#if UNITY_EDITOR
        private static GameObject LoadAndCreateInEditor(string name, int ttl)
        {
#if PROFILE_FILE
            Profiler.BeginSample("BundleHelper.LoadAndCreateInEditor");
#endif
            var assetName = getAssetName(name);
            var path = "Assets/" + name + ".prefab";

            GameObject result = null;
            var prefab = AssetDatabase.LoadAssetAtPath<GameObject>(path);
            if (prefab != null)
            {
                result = GameObject.Instantiate(prefab);
            }

#if PROFILE_FILE
            Profiler.EndSample();
#endif
            return result;
        }
#endif

        /// <summary>
        /// Loads the asset bundle with all its dependencies.
        /// </summary>
        /// <returns>The with dependencies.</returns>
        /// <param name="uri">URI.</param>
        public static AssetBundleRef LoadWithDependencies(string uri, int ttl)
        {
#if PROFILE_FILE
            Profiler.BeginSample("BundleHelper.LoadWithDependencies");
#endif
            uri = fixBundleUri(uri);
            AssetBundleRef bundle = BundleManager.LoadWithDependencies(uri, ttl);
#if PROFILE_FILE
            Profiler.EndSample();
#endif
            return bundle;
        }

        /// <summary>
        /// Unloads the asset bundle
        /// </summary>
        /// <param name="uri">URI.</param>
        public static void Unload(string uri, bool unloadAllLoadedObjects)
        {
#if PROFILE_FILE
            Profiler.BeginSample("BundleHelper.Unload");
#endif
            var fixedUri = fixBundleUri(uri);
            BundleManager.Unload(fixedUri, unloadAllLoadedObjects);

#if PROFILE_FILE
            Profiler.EndSample();
#endif
        }

        /// <summary>
        /// Loads the asset bundle async
        /// </summary>
        /// <param name="uri">URI.</param>
        /// <param name="onComplete">On complete.</param>
        public static void LoadAsync(string uri, int ttl, Action<AssetBundleRef> onComplete)
        {
            StartCoroutine(_LoadAsync(uri, ttl, onComplete));
        }

        public static void LoadAsync(string uri, int ttl, LuaTable lua, bool useLuaHolder = true)
        {
            StartCoroutine(_LoadAsync(uri, ttl, lua));
        }

        private static IEnumerator _LoadAsync(string uri, int ttl, Action<AssetBundleRef> onComplete)
        {
#if PROFILE_FILE
            // Profiler.BeginSample("BundleHelper._LoadAsync");
#endif
            var fixedUri = fixBundleUri(uri);
            AssetBundleRef assetBundle = null;
            var iter = BundleManager.LoadAsync(null, fixedUri, ttl);
            var count = 0;
            while (iter.MoveNext())
            {
                count++;
                yield return null;
            }

            assetBundle = BundleManager.GetBundleRef(fixedUri);
            onComplete(assetBundle);

#if PROFILE_FILE
            // Profiler.EndSample();
#endif
        }

        private static IEnumerator _LoadAsync(string uri, int ttl, LuaTable lua)
        {
#if PROFILE_FILE
            // Profiler.BeginSample("BundleHelper._LoadAsync");
#endif
            var fixedUri = fixBundleUri(uri);
            var iter = BundleManager.LoadAsync(null, fixedUri, ttl);
            var count = 0;
            while (iter.MoveNext())
            {
                count++;
                yield return null;
            }


            if (lua != null)
            {
                lua.setOneLevelField("bundle", BundleManager.GetBundleRef(fixedUri));
            }

#if PROFILE_FILE
            // Profiler.EndSample();
#endif
        }

        /// <summary>
        /// Loads the asset bundle with all its dependencies async.
        /// </summary>
        /// <param name="uri">URI.</param>
        /// <param name="onComplete">On complete.</param>
        public static void LoadWithDependenciesAsync(string uri, int ttl, Action<AssetBundleRef> onComplete)
        {
            StartCoroutine(_LoadWithDependenciesAsync(uri, ttl, onComplete));
        }

        public static void LoadWithDependenciesAsync(string uri, int ttl, LuaTable lua, bool useLuaHolder = true)
        {
            StartCoroutine(_LoadWithDependenciesAsync(uri, ttl, lua));
        }

        [SLua.DoNotToLua]
        public static void LoadWithDependenciesAsync(string uri, int ttl, Action<AssetBundleRef> onComplete, Action<AsyncLoadingType, float> onProgress)
        {
//            StartCoroutine(_LoadWithDependenciesAsync(uri, ttl, onComplete, onProgress));
        }

        private static IEnumerator _LoadWithDependenciesAsync(string uri, int ttl, Action<AssetBundleRef> onComplete)
        {
#if PROFILE_FILE
            // Profiler.BeginSample("BundleHelper._LoadWithDependenciesAsync");
#endif
            var fixedUri = fixBundleUri(uri);
            AssetBundleRef assetBundle = null;
            var iter = BundleManager.LoadWithDependenciesAsync(fixedUri, ttl);
            while (iter.MoveNext())
            {
                yield return null;
            }
            assetBundle = BundleManager.GetBundleRef(fixedUri);
            onComplete(assetBundle);
#if PROFILE_FILE
            // Profiler.EndSample();
#endif
        }

        private static IEnumerator _LoadWithDependenciesAsync(string uri, int ttl, LuaTable lua)
        {
#if PROFILE_FILE
            // Profiler.BeginSample("BundleHelper._LoadWithDependenciesAsync");
#endif
            var fixedUri = fixBundleUri(uri);
            AssetBundleRef assetBundle = null;
            var iter = BundleManager.LoadWithDependenciesAsync(fixedUri, ttl);
            int count = 0;
            while (iter.MoveNext())
            {
                count++;
                yield return null;
            }

            assetBundle = BundleManager.GetBundleRef(fixedUri);
            if (lua != null)
            {
                lua.setOneLevelField("bundle", assetBundle);
            }
#if PROFILE_FILE
            // Profiler.EndSample();
#endif
        }


        /// <summary>
        /// Reset the bundle manager
        /// </summary>
        public static void Reset()
        {
#if PROFILE_FILE
            Profiler.BeginSample("BundleHelper.Reset");
#endif
            BundleConfig.Reset();
            BundleManager.Reset();
#if PROFILE_FILE
            Profiler.EndSample();
#endif
        }

        public static void SetBundleVariants(string[] variants)
        {
            BundleManager.SetBundleVariantes(variants);
        }

        public static void UnloadDeadBundles()
        {
#if PROFILE_FILE
            Profiler.BeginSample("BundleHelper.UnloadDeadBundles");
#endif
            BundleManager.UnloadDeadBundles();
#if PROFILE_FILE
            Profiler.EndSample();
#endif
        }

        public static void UnloadDeadBundles(bool unloadAllLoadedObjects)
        {
#if PROFILE_FILE
            Profiler.BeginSample("BundleHelper.UnloadDeadBundles");
#endif
            BundleManager.UnloadDeadBundles(unloadAllLoadedObjects);
#if PROFILE_FILE
            Profiler.EndSample();
#endif
        }

        public static void UnloadDeadBundles(bool unloadAllLoadedObjects, int iterCount)
        {
#if PROFILE_FILE
            Profiler.BeginSample("BundleHelper.UnloadDeadBundles");
#endif
            BundleManager.UnloadDeadBundles(unloadAllLoadedObjects, iterCount);
#if PROFILE_FILE
            Profiler.EndSample();
#endif
        }

        public static string[] GetAllDependencies(string uri)
        {
#if PROFILE_FILE
            Profiler.BeginSample("BundleHelper.GetAllDependencies");
#endif
            var fixedUri = fixBundleUri(uri);
            var depends = BundleManager.GetAllDependencies(fixedUri);
#if PROFILE_FILE
            Profiler.EndSample();
#endif
            return depends;
        }

        ////////////////////////////

        internal static string fixBundleUri(string uri)
        {
            if (uri.LastIndexOf(LBootApp.DEFAULT_BUNDLE_EXTENSION) == -1)
            {
                uri = uri + LBootApp.DEFAULT_BUNDLE_EXTENSION;
            }

            if (uriPrefix != null)
            {
                uri = uriPrefix + uri;
            }

            return uri.ToLower();
        }

        internal static string getAssetName(string name)
        {
            return name.Split('/').Last();
        }

        internal static Coroutine StartCoroutine(IEnumerator e)
        {
            var behaviour = LBootApp.Instance;
            if (behaviour != null)
            {
                return behaviour.StartCoroutine(e);
            }
            else
            {
                LogUtil.Error("LBootApp.Instance is null, something is seriously wrong");
                return null;
            }
        }
    }
}

