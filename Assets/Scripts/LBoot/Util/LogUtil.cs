//
// LogUtil.cs
//
// Author:
//       duwenjie
//

//
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using UnityEngine;
using SLua;

namespace LBoot
{
    /// <summary>
    /// LogUtil
    /// Conditional control debug logs
    /// </summary>
    [CustomLuaClassAttribute]
    public class LogUtil
    {
        [CustomLuaClassAttribute]
        public enum LogLevel
        {
            Trace,
            Debug,
            Info,
            Warn,
            Error,
        }

        public static LogLevel level = LogLevel.Debug;

        public static bool ShouldLog(LogLevel l)
        {
			return true;
// #if UNITY_EDITOR
//             return true;
// #else
            return ((int) l >= (int) level);
// #endif // UNITY_EDITOR
        }

        // [System.Diagnostics.Conditional("UNITY_EDITOR")]
        public static void Trace(object message)
        {
            if (ShouldLog(LogLevel.Trace))
            {
                UnityEngine.Debug.Log(message);
            }
        }

        // [System.Diagnostics.Conditional("UNITY_EDITOR")]
        public static void TraceFormat(string format, params object [] args)
        {
            if (ShouldLog(LogLevel.Trace))
            {
                UnityEngine.Debug.LogFormat(format, args);
            }
        }

        // [System.Diagnostics.Conditional("UNITY_EDITOR")]
        public static void Debug(object message)
        {
            if (ShouldLog(LogLevel.Debug))
            {
                UnityEngine.Debug.Log(message);
            }
        }

        // [System.Diagnostics.Conditional("UNITY_EDITOR")]
        public static void DebugFormat(string format, params object [] args)
        {
            if (ShouldLog(LogLevel.Debug))
            {
                UnityEngine.Debug.LogFormat(format, args);
            }
        }

        // [System.Diagnostics.Conditional("UNITY_EDITOR")]
        public static void Info(object message)
        {
            if (ShouldLog(LogLevel.Info))
            {
                UnityEngine.Debug.Log(message);
            }
        }

        // [System.Diagnostics.Conditional("UNITY_EDITOR")]
        public static void InfoFormat(string format, params object [] args)
        {
            if (ShouldLog(LogLevel.Info))
            {
                UnityEngine.Debug.LogFormat(format, args);
            }
        }

        // [System.Diagnostics.Conditional("UNITY_EDITOR")]
        public static void Warn(object message)
        {
            if (ShouldLog(LogLevel.Warn))
            {
                UnityEngine.Debug.LogWarning(message);
            }
        }

        // [System.Diagnostics.Conditional("UNITY_EDITOR")]
        public static void WarnFormat(string format, params object [] args)
        {
            if (ShouldLog(LogLevel.Warn))
            {
                UnityEngine.Debug.LogWarningFormat(format, args);
            }
        }

        // [System.Diagnostics.Conditional("UNITY_EDITOR")]
        public static void Error(object message)
        {
            if (ShouldLog(LogLevel.Error))
            {
                UnityEngine.Debug.LogError(message);
            }
        }

        // [System.Diagnostics.Conditional("UNITY_EDITOR")]
        public static void ErrorFormat(string format, params object [] args)
        {
            if (ShouldLog(LogLevel.Error))
            {
                UnityEngine.Debug.LogErrorFormat(format, args);
            }
        }

        // [System.Diagnostics.Conditional("UNITY_EDITOR")]
        public static void Exception(Exception exception)
        {
            if (ShouldLog(LogLevel.Error))
            {
                UnityEngine.Debug.LogException(exception);
            }
        }

        public static void dumpObjectCache()
        {
            SLua.ObjectCache.dumpLast();
        }
    }

}

