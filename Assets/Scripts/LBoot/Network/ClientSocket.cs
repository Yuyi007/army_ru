//
// ClientSocket.cs
//
// Author:
//       duwenjie
//

//
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Net;
using System.Net.Sockets;
using UnityEngine;

namespace LBoot
{
    public class ClientSocket
    {
        public static int BUF_SIZE = 8196;
        
        public delegate void OnConnect(bool success);
        public delegate void OnSend(int bytesSent);
        public delegate void OnReceive(byte [] buffer, int bytesReceived);

        string host;
        int port;
        Socket sock;
        
        // State object for receiving data from remote device.
        internal class StateObject {
            // Client socket.
            public Socket workSocket = null;
            // Receive buffer.
            public byte[] buffer = null;
            // Bytes received
            public int bytesReceived = 0;
            // Receive callback
            public OnReceive onReceive = null;
        }

        public ClientSocket(string host, int port)
        {
            this.host = host;
            this.port = port;
        }
        
        //------------------ Common ------------------//
        
        private void initSocket(out IPEndPoint remoteEP)
        {
            sock = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            
            IPHostEntry ipHostInfo = Dns.GetHostEntry(host);
            IPAddress ipAddress = ipHostInfo.AddressList[0];
            remoteEP = new IPEndPoint(ipAddress, port);
        }

        //------------------ Sync Interfaces ------------------//

        public bool Connect()
        {
            if (sock != null)
            {
                LogUtil.Debug("ClientSocket.Connect: close first");
                return false;
            }
            
            IPEndPoint remoteEP = null;
            initSocket(out remoteEP);
            
            try {
                sock.Connect(remoteEP);
                return true;
            }
            catch (SocketException e)
            {
                LogUtil.ErrorFormat("ClientSocket.Connect: {0}", e.ToString());
            }

            return false;
        }

        public int Send(byte [] data)
        {
            try 
            {
                int bytesSent = sock.Send(data);
                return bytesSent;
            }
            catch (Exception e) 
            {
                LogUtil.Error("ClientSocket.Send: " + e.ToString());
            }

            return -1;
        }

        public int Receive(byte [] buffer)
        {
            try
            {
                int bytesReceived = sock.Receive(buffer);
                return bytesReceived;
            }
            catch (Exception e)
            {
                LogUtil.Error("ClientSocket.Receive: " + e.ToString());
            }

            return -1;
        }

        public void Close()
        {
            if (sock != null)
            {
                sock.Shutdown(SocketShutdown.Both);
                sock.Close();
                sock = null;
            }
        }

        //------------------ Async Interfaces ------------------//

        public void AsyncConnect(OnConnect onConnect)
        {
            if (sock != null)
            {
                LogUtil.Error("ClientSocket.Connect: close first");
                return;
            }
            
            IPEndPoint remoteEP = null;
            initSocket(out remoteEP);
            
            sock.BeginConnect(remoteEP, new AsyncCallback(ConnectCallback), onConnect);
        }
        
        private void ConnectCallback(IAsyncResult ar)
        {
            // Retrieve the callback from the state object.
            OnConnect onConnect = (OnConnect) ar.AsyncState;

            try {
                // Complete the connection.
                sock.EndConnect(ar);
                LogUtil.DebugFormat("ClientSocket.ConnectCallback: connected to {0}", sock.RemoteEndPoint.ToString());
                
                onConnect.Invoke(true);
            } catch (Exception e) {
                LogUtil.Error("ClientSocket.ConnectCallback: " + e.ToString());

                onConnect.Invoke(false);
            }
        }

        public void AsyncSend(byte [] data, OnSend onSend)
        {
            sock.BeginSend(data, 0, data.Length, 0, new AsyncCallback(SendCallback), onSend);
        }

        private void SendCallback(IAsyncResult ar) 
        {
            // Retrieve the callback from the state object.
            OnSend onSend = (OnSend) ar.AsyncState;

            try {
                // Complete sending the data to the remote device.
                int bytesSent = sock.EndSend(ar);

                onSend.Invoke(bytesSent);
            } catch (Exception e) {
                LogUtil.Error("ClientSocket.SendCallback: " + e.ToString());

                onSend.Invoke(-1);
            }
        }

        public void AsyncReceive(OnReceive onReceive)
        {
            AsyncReceive(new byte[BUF_SIZE], onReceive);
        }
        
        public void AsyncReceive(byte [] buffer, OnReceive onReceive)
        {
            try {
                // Create the state object.
                StateObject state = new StateObject();
                state.workSocket = sock;
                state.buffer = buffer;
                state.onReceive = onReceive;
                
                // Begin receiving the data from the remote device.
                sock.BeginReceive(state.buffer, 0, buffer.Length, 0,
                                  new AsyncCallback(ReceiveCallback), state);
            } catch (Exception e) {
                LogUtil.Error("ClientSocket.AsyncReceive: " + e.ToString());
            }
        }

        private void ReceiveCallback( IAsyncResult ar ) {
            try {
                // Retrieve the state object and the client socket 
                // from the asynchronous state object.
                StateObject state = (StateObject) ar.AsyncState;
                Socket client = state.workSocket;
                
                // Read data from the remote device.
                int bytesRead = client.EndReceive(ar);
                if (bytesRead > 0) {
                    state.bytesReceived += bytesRead;
                    // Get the rest of the data.
                    client.BeginReceive(state.buffer, state.bytesReceived,
                                        state.buffer.Length - state.bytesReceived, 0,
                                        new AsyncCallback(ReceiveCallback), state);
                } else {
                    // All the data has arrived; put it in response.
                    state.onReceive(state.buffer, state.bytesReceived);
                }
            } catch (Exception e) {
                LogUtil.Error("ClientSocket.ReceiveCallback: " + e.ToString());
            }
        }

    }
}

