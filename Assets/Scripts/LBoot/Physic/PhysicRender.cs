//
// PhysicRender.cs
//
// Author:
//       duwenjie
//
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using SLua;

namespace LBoot
{
public class AABB
{
	public float minx, miny, minz;
	public float maxx, maxy, maxz;

	public AABB(float _minx, float _miny, float _minz, float _maxx, float _maxy, float _maxz)
	{
		minx = _minx;
		miny = _miny;
		minz = _minz;

		maxx = _maxx;
		maxy = _maxy;
		maxz = _maxz;
	}
}
[CustomLuaClassAttribute]
public class PhysicRender : MonoBehaviour {
	public List<AABB> aabbs = new List<AABB>();
	static Material lineMaterial;
	static void CreateLineMaterial()
	{
		if (!lineMaterial)
		{
			// Unity has a built-in shader that is useful for drawing
			// simple colored things.
			Shader shader = Shader.Find("Hidden/Internal-Colored");
			lineMaterial = new Material(shader);
			lineMaterial.hideFlags = HideFlags.HideAndDontSave;
			// Turn on alpha blending
			lineMaterial.SetInt("_SrcBlend", (int)UnityEngine.Rendering.BlendMode.SrcAlpha);
			lineMaterial.SetInt("_DstBlend", (int)UnityEngine.Rendering.BlendMode.OneMinusSrcAlpha);
			// Turn backface culling off
			lineMaterial.SetInt("_Cull", (int)UnityEngine.Rendering.CullMode.Off);
			// Turn off depth writes
			lineMaterial.SetInt("_ZWrite", 0);
		}
	}

	// Use this for initialization
	void Start () {
	
	}
	
	// Update is called once per frame
	void Update () {

	}

	void OnPostRender()
	{
		renderAABBs ();
	}

	public void addAABB(float minx, float miny, float minz, float maxx, float maxy, float maxz)
	{
		aabbs.Add (new AABB(minx, miny, minz, maxx, maxy, maxz));
	}

	public void clear()
	{
		aabbs.Clear ();
	}

	public void renderAABBs()
	{	
		CreateLineMaterial();
		// Apply the line material
		lineMaterial.SetPass(0);
		for (int i = 0; i < aabbs.Count; i++) 
		{
			AABB aabb = aabbs [i];
			_renderAABB (aabb);
		}
	}

	void _renderAABB(AABB aabb)
	{	
		GL.PushMatrix();
		GL.Begin(GL.LINES);//GL_LINE_LOOP
		GL.Color( Color.red);
		GL.Vertex3(aabb.minx, aabb.miny, aabb.minz);
		GL.Vertex3(aabb.maxx, aabb.miny, aabb.minz);

		GL.Vertex3(aabb.maxx, aabb.miny, aabb.minz);
		GL.Vertex3(aabb.maxx, aabb.maxy, aabb.minz);

		GL.Vertex3(aabb.maxx, aabb.maxy, aabb.minz);
		GL.Vertex3(aabb.minx, aabb.maxy, aabb.minz);
		
		GL.Vertex3(aabb.minx, aabb.maxy, aabb.minz);
		GL.Vertex3(aabb.minx, aabb.miny, aabb.minz);


		//front
		GL.Color (Color.green);
		GL.Vertex3(aabb.minx, aabb.miny, aabb.maxz);
		GL.Vertex3(aabb.maxx, aabb.miny, aabb.maxz);
	
		GL.Vertex3(aabb.maxx, aabb.miny, aabb.maxz);
		GL.Vertex3(aabb.maxx, aabb.maxy, aabb.maxz);

		GL.Vertex3(aabb.maxx, aabb.maxy, aabb.maxz);
		GL.Vertex3(aabb.minx, aabb.maxy, aabb.maxz);

		GL.Vertex3(aabb.minx, aabb.maxy, aabb.maxz);
		GL.Vertex3(aabb.minx, aabb.miny, aabb.maxz);

		//side

		GL.Color (Color.blue);
		GL.Vertex3(aabb.minx, aabb.miny, aabb.minz);
		GL.Vertex3(aabb.minx, aabb.miny, aabb.maxz);

		GL.Vertex3(aabb.minx, aabb.maxy, aabb.minz);
		GL.Vertex3(aabb.minx, aabb.maxy, aabb.maxz);

		GL.Vertex3(aabb.maxx, aabb.miny, aabb.minz);
		GL.Vertex3(aabb.maxx, aabb.miny, aabb.maxz);

		GL.Vertex3(aabb.maxx, aabb.maxy, aabb.minz);
		GL.Vertex3(aabb.maxx, aabb.maxy, aabb.maxz);
		GL.End();
		GL.PopMatrix();
	}
}

}