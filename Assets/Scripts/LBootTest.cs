//
// LBootTest.cs
//
// Author:
//       duwenjie
//

//
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;
using LBoot;
using System.IO;
using System.Collections.Generic;

public class LBootTest : MonoBehaviour
{
    void Start()
    {
        LogUtil.Debug("LBootTest Started");
        TestFileExists();
        TestGetDataFromFile();
        TestGetDataFromRawPath();
    }

    public IEnumerator TestFileExists()
    {
        var files = new List<string>{ "debug.lua", "debug.lua2" };

        foreach (string f in files)
        {
            LogUtil.Debug("persist+" + f + ": " + FileUtils.IsFileExistsInPersistentData(f));
            LogUtil.Debug("streaming+" + f + ": " + FileUtils.IsFileExistsInStreamingAssets(f));
            LogUtil.Debug("raw+" + f + ": " + FileUtils.IsFileExistsInRawPath(f));
        }

        return null;
    }

    public IEnumerator TestGetDataFromFile()
    {
        var fpath = "debug.lua";
        LogUtil.Debug("TestGetDataFromFile: loading " + fpath);

        byte [] data1 = FileUtils.GetDataFromFile(fpath);
        if (data1 != null)
        {
            LogUtil.Debug("TestGetDataFromFile: read success length=" + data1.Length);

#if UNITY_ANDROID && ! UNITY_EDITOR
            for (int i = 0; i < data1.Length; ++i)
            {
                if (i < 9 || i > data1.Length - 9)
                {
                    LogUtil.Debug("data at " + i + " is " + data1[i]);
                }
            }
#else
            byte [] data2 = File.ReadAllBytes(Application.streamingAssetsPath + "/" + fpath);
            
            LogUtil.Debug("TestGetDataFromFile: length " + data1.Length + " " + 
                data2.Length + " " + (data1.Length == data2.Length));
            for (int i = 0; i < data1.Length && i < data2.Length; ++i)
            {
                if (data1[i] != data2[i])
                {
                    LogUtil.Error("TestGetDataFromFile: data differs at " + i);
                }
            }
#endif
        }
        else 
        {
            LogUtil.Debug("TestGetDataFromFile: read failed!");
        }

        return null;
    }

    public IEnumerator TestGetDataFromRawPath()
    {
        var files = new List<string>{ "/etc/profile", "/etc/profile2" };
        
        foreach (string f in files)
        {
            byte [] data = FileUtils.GetDataFromFile(f);
            LogUtil.Debug("" + f + ": " + ((data != null) ? data.Length.ToString() : "not exists"));

            data = FileUtils.GetDataFromRawPath(f);
            LogUtil.Debug("raw+" + f + ": " + ((data != null) ? data.Length.ToString() : "not exists"));
        }

        return null;
    }
}
